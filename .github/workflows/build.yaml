name: Build and Deploy Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GCP_PROJECT_ID: regai-bank
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  IMAGE_NAME: ragaiq-web
  SERVICE_NAME: ragaiq-web

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: .next
        retention-days: 1

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}

    - name: Get Backend Service URLs
      id: backend-urls
      run: |
        CHAT_URL=$(gcloud run services describe regai-chat-service --region ${{ env.GCP_REGION }} --format 'value(status.url)')
        VECTOR_URL=$(gcloud run services describe regai-vector-service --region ${{ env.GCP_REGION }} --format 'value(status.url)')
        PDF_URL=$(gcloud run services describe regai-pdf-processor --region ${{ env.GCP_REGION }} --format 'value(status.url)')
        
        echo "chat_url=$CHAT_URL" >> $GITHUB_OUTPUT
        echo "vector_url=$VECTOR_URL" >> $GITHUB_OUTPUT
        echo "pdf_url=$PDF_URL" >> $GITHUB_OUTPUT

    - name: Build Docker Image
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_CHAT_SERVICE_URL=${{ steps.backend-urls.outputs.chat_url }} \
          --build-arg NEXT_PUBLIC_VECTOR_SERVICE_URL=${{ steps.backend-urls.outputs.vector_url }} \
          --build-arg NEXT_PUBLIC_API_BASE_URL=${{ steps.backend-urls.outputs.chat_url }} \
          --build-arg NODE_ENV=production \
          --platform linux/amd64 \
          -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai-reg-bank/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai-reg-bank/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          .

    - name: Push Docker Image
      run: |
        docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai-reg-bank/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai-reg-bank/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/ai-reg-bank/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port 3000 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 20 \
          --min-instances 1 \
          --concurrency 1000 \
          --timeout 300 \
          --set-env-vars "NODE_ENV=production" \
          --set-env-vars "NEXT_PUBLIC_API_BASE_URL=${{ steps.backend-urls.outputs.chat_url }}" \
          --set-env-vars "NEXT_PUBLIC_CHAT_SERVICE_URL=${{ steps.backend-urls.outputs.chat_url }}" \
          --set-env-vars "NEXT_PUBLIC_VECTOR_SERVICE_URL=${{ steps.backend-urls.outputs.vector_url }}" \
          --set-env-vars "GCS_BUCKET_NAME=regulatory-knowledge-base" \
          --set-env-vars "GCS_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" \
          --set-env-vars "NEXT_PUBLIC_ENABLE_SSO=false" \
          --set-env-vars "NEXT_PUBLIC_ENABLE_ANALYTICS=false" \
          --set-env-vars "NEXT_PUBLIC_SUPPORT_EMAIL=support@ragaiq.com" \
          --set-secrets "NEXTAUTH_SECRET=nextauth-secret:latest" \
          --set-secrets "DATABASE_URL=database-url:latest" \
          --service-account ragaiq-web-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com
        
        FRONTEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.GCP_REGION }} --format 'value(status.url)')
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Update NEXTAUTH_URL
      run: |
        gcloud run services update ${{ env.SERVICE_NAME }} \
          --region ${{ env.GCP_REGION }} \
          --update-env-vars "NEXTAUTH_URL=${{ steps.deploy.outputs.frontend_url }}"

    - name: Run Health Check
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        MAX_ATTEMPTS=5
        ATTEMPT=1
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
          if curl -f ${{ steps.deploy.outputs.frontend_url }}/api/health; then
            echo "Health check passed!"
            break
          else
            echo "Health check failed, retrying..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "Health check failed after $MAX_ATTEMPTS attempts"
          exit 1
        fi

    - name: Output Deployment Info
      run: |
        echo "================================"
        echo "Deployment Successful!"
        echo "================================"
        echo "Frontend URL: ${{ steps.deploy.outputs.frontend_url }}"
        echo "Chat Service: ${{ steps.backend-urls.outputs.chat_url }}"
        echo "Vector Service: ${{ steps.backend-urls.outputs.vector_url }}"
        echo "PDF Service: ${{ steps.backend-urls.outputs.pdf_url }}"
        echo "================================"